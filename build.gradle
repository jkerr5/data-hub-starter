buildscript {
}

plugins {
  // Gradle Properties plugin
  id 'net.saliman.properties' version '1.4.6'

  // Data Hub plugin
  id 'com.marklogic.ml-data-hub' version '5.1.0'

	// Data services
	id 'com.marklogic.ml-development-tools' version '4.2.0'

  id 'java'
}

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()

  // Needed for some mlcp dependencies, such as commons-csv:1.5.1-marklogic
  maven { url "http://developer.marklogic.com/maven2/" }
}

configurations {
  mlcp
}

dependencies {
  mlcp "com.marklogic:mlcp:9.0.11"

  /**
  * mlcp uses Log4j for logging, and if Log4j can't find a configuration file, it will complain and you'll
  * get none of mlcp's usually-useful logging. It is recommended then that your Gradle configuration for
  * mlcp include a directory or some other resource that provides a log4j.properties file.
  */
  mlcp files("lib")

  compile group: 'com.marklogic', name: 'marklogic-client-api', version: '4.2.0'
}

/**
 * Loads sample JSON data to a database. Change the "port" to be "mlStagingPort" to load to staging instead. 
 * For a data hub, you would also typically invoke an ingest step of a flow to put the data in an envelope.
 * 
 * transform_module = "/data-hub/5/transforms/mlcp-flow-transform.sjs"
 * transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
 * transform_param = "flow-name=<my flow name>,step=<my ingest step number>"
 */
task loadMoviesJson(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "IMPORT"
  port = mlFinalPort.toInteger()
  ssl = sslFlag.toBoolean()
  username = mlUsername
  password = mlPassword
  input_file_path = "data/movies-json"
  input_file_type = "documents"
  document_type = "json"
  output_collections = "movies-json"

  // URI will be relative to the data/ directory
  output_uri_replace = "${rootProject.projectDir.absolutePath}/data,''"
  //output_uri_prefix = ""
  //output_uri_suffix = ""

  output_permissions = "endpointUser,read,endpointUser,update"
}

/**
 * Loads sample XML data to a database. Change the "port" to be "mlStagingPort" to load to staging instead. 
 * For a data hub, you would also typically invoke an ingest step of a flow to put the data in an envelope.
 * 
 * transform_module = "/data-hub/5/transforms/mlcp-flow-transform.sjs"
 * transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
 * transform_param = "flow-name=<my flow name>,step=<my ingest step number>"
 */
task loadMoviesXml(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "IMPORT"
  port = mlFinalPort.toInteger()
  ssl = sslFlag.toBoolean()
  username = mlUsername
  password = mlPassword
  input_file_path = "data/movies-xml"
  input_file_type = "documents"
  document_type = "xml"
  output_collections = "movies-xml"

  // URI will be relative to the data/ directory
  output_uri_replace = "${rootProject.projectDir.absolutePath}/data,''"
  //output_uri_prefix = ""
  //output_uri_suffix = ""

  output_permissions = "endpointUser,read,endpointUser,update"
}

task generateMovieSearchProxies(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask) {
	serviceDeclarationFile = 'src/main/ml-modules/root/ds/movies/service.json'
}

task runMovieSearch(type: JavaExec) {
  doFirst {
    args = [
      "--host", mlHost,
      "--port", mlFinalPort,
      "--username", mlUsername,
      "--password", mlPassword,
      "--dhs", mlIsProvisionedEnvironment,
      searchString
    ]
  }

  group = "Execution"
  description = "Run a search against the movie search service"
  classpath = sourceSets.main.runtimeClasspath
  main = "com.marklogic.hubstarter.client.MovieSearcher"
}
